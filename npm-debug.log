0 info it worked if it ends with ok
1 verbose cli [ '/usr/bin/nodejs', '/usr/bin/npm', 'install', 'contextify' ]
2 info using npm@2.14.2
3 info using node@v3.0.0
4 verbose install initial load of /home/aabakumovs/Documents/Projects/DashboardsProto/package.json
5 verbose installManyTop reading scoped package data from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/autoprefixer-core/package.json
6 verbose installManyTop reading scoped package data from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/babel-core/package.json
7 verbose installManyTop reading scoped package data from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/babel-loader/package.json
8 verbose installManyTop reading scoped package data from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/babel-plugin-rewire/package.json
9 verbose installManyTop reading scoped package data from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/babel-runtime/package.json
10 verbose installManyTop reading scoped package data from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/d3/package.json
11 verbose installManyTop reading scoped package data from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/extract-text-webpack-plugin/package.json
12 verbose installManyTop reading scoped package data from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/file-loader/package.json
13 verbose installManyTop reading scoped package data from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/html-loader/package.json
14 verbose installManyTop reading scoped package data from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/jquery/package.json
15 verbose installManyTop reading scoped package data from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/json-loader/package.json
16 verbose installManyTop reading scoped package data from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/jsx-loader/package.json
17 verbose installManyTop reading scoped package data from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/koa/package.json
18 verbose installManyTop reading scoped package data from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/koa-body-parser/package.json
19 verbose installManyTop reading scoped package data from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/koa-static/package.json
20 verbose installManyTop reading scoped package data from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/less/package.json
21 verbose installManyTop reading scoped package data from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/less-loader/package.json
22 verbose installManyTop reading scoped package data from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/lodash/package.json
23 verbose installManyTop reading scoped package data from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/opn/package.json
24 verbose installManyTop reading scoped package data from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/react/package.json
25 verbose installManyTop reading scoped package data from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/react-hot-loader/package.json
26 verbose installManyTop reading scoped package data from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/template-html-loader/package.json
27 verbose installManyTop reading scoped package data from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/webpack/package.json
28 verbose installManyTop reading scoped package data from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/webpack-dev-server/package.json
29 info package.json babel-core@5.8.24 No README data
30 info package.json html-loader@0.3.0 No license field.
31 info package.json jquery@2.1.4 No license field.
32 info package.json jsx-loader@0.13.2 license should be a valid SPDX license expression
33 info package.json less-loader@2.2.0 No license field.
34 verbose readDependencies loading dependencies from /home/aabakumovs/Documents/Projects/DashboardsProto/package.json
35 silly cache add args [ 'contextify', null ]
36 verbose cache add spec contextify
37 silly cache add parsed spec { raw: 'contextify',
37 silly cache add   scope: null,
37 silly cache add   name: 'contextify',
37 silly cache add   rawSpec: '',
37 silly cache add   spec: '*',
37 silly cache add   type: 'range' }
38 silly addNamed contextify@*
39 verbose addNamed "*" is a valid semver range for contextify
40 silly addNameRange { name: 'contextify', range: '*', hasData: false }
41 silly mapToRegistry name contextify
42 silly mapToRegistry using default registry
43 silly mapToRegistry registry https://registry.npmjs.org/
44 silly mapToRegistry uri https://registry.npmjs.org/contextify
45 verbose addNameRange registry:https://registry.npmjs.org/contextify not in flight; fetching
46 verbose request uri https://registry.npmjs.org/contextify
47 verbose request no auth needed
48 info attempt registry request try #1 at 08:17:55
49 verbose request id baefb35deeb21f36
50 verbose etag "3YXYN4N9CEB0MFSVNGRY8PG2G"
51 http request GET https://registry.npmjs.org/contextify
52 http 304 https://registry.npmjs.org/contextify
53 silly get cb [ 304,
53 silly get   { date: 'Mon, 14 Sep 2015 15:17:55 GMT',
53 silly get     via: '1.1 varnish',
53 silly get     'cache-control': 'max-age=60',
53 silly get     etag: '"3YXYN4N9CEB0MFSVNGRY8PG2G"',
53 silly get     age: '15',
53 silly get     connection: 'keep-alive',
53 silly get     'x-served-by': 'cache-fra1231-FRA',
53 silly get     'x-cache': 'HIT',
53 silly get     'x-cache-hits': '1',
53 silly get     'x-timer': 'S1442243875.522533,VS0,VE0',
53 silly get     vary: 'Accept' } ]
54 verbose etag https://registry.npmjs.org/contextify from cache
55 verbose get saving contextify to /home/aabakumovs/.npm/registry.npmjs.org/contextify/.cache.json
56 silly addNameRange number 2 { name: 'contextify', range: '*', hasData: true }
57 silly addNameRange versions [ 'contextify',
57 silly addNameRange   [ '0.0.2',
57 silly addNameRange     '0.0.3',
57 silly addNameRange     '0.0.4',
57 silly addNameRange     '0.0.5',
57 silly addNameRange     '0.0.6',
57 silly addNameRange     '0.0.7',
57 silly addNameRange     '0.1.0',
57 silly addNameRange     '0.1.1',
57 silly addNameRange     '0.1.2',
57 silly addNameRange     '0.1.3',
57 silly addNameRange     '0.1.4',
57 silly addNameRange     '0.1.5',
57 silly addNameRange     '0.1.6',
57 silly addNameRange     '0.1.7',
57 silly addNameRange     '0.1.8',
57 silly addNameRange     '0.1.9',
57 silly addNameRange     '0.1.10',
57 silly addNameRange     '0.1.11',
57 silly addNameRange     '0.1.12',
57 silly addNameRange     '0.1.13',
57 silly addNameRange     '0.1.14' ] ]
58 silly addNamed contextify@0.1.14
59 verbose addNamed "0.1.14" is a plain semver version for contextify
60 silly cache afterAdd contextify@0.1.14
61 verbose afterAdd /home/aabakumovs/.npm/contextify/0.1.14/package/package.json not in flight; writing
62 verbose afterAdd /home/aabakumovs/.npm/contextify/0.1.14/package/package.json written
63 silly install resolved [ { name: 'contextify',
63 silly install resolved     version: '0.1.14',
63 silly install resolved     description: 'Turn an object into a persistent execution context.',
63 silly install resolved     author: { name: 'Brian McDaniel', email: 'brianmcd05@gmail.com' },
63 silly install resolved     contributors:
63 silly install resolved      [ [Object],
63 silly install resolved        [Object],
63 silly install resolved        [Object],
63 silly install resolved        [Object],
63 silly install resolved        [Object],
63 silly install resolved        [Object],
63 silly install resolved        [Object],
63 silly install resolved        [Object],
63 silly install resolved        [Object],
63 silly install resolved        [Object],
63 silly install resolved        [Object],
63 silly install resolved        [Object] ],
63 silly install resolved     keywords: [ 'context', 'vm' ],
63 silly install resolved     repository:
63 silly install resolved      { type: 'git',
63 silly install resolved        url: 'git+https://github.com/brianmcd/contextify.git' },
63 silly install resolved     main: './lib/contextify',
63 silly install resolved     scripts: { test: 'nodeunit test/', install: 'node-gyp rebuild' },
63 silly install resolved     engines: { node: '>=0.4.0' },
63 silly install resolved     licenses: [ [Object] ],
63 silly install resolved     dependencies: { bindings: '*', nan: '~1.8.4' },
63 silly install resolved     devDependencies: { nodeunit: '>=0.5.x' },
63 silly install resolved     gypfile: true,
63 silly install resolved     gitHead: '1ed0631b435f6301986cc0890c36a29d5c55de97',
63 silly install resolved     bugs: { url: 'https://github.com/brianmcd/contextify/issues' },
63 silly install resolved     homepage: 'https://github.com/brianmcd/contextify',
63 silly install resolved     _id: 'contextify@0.1.14',
63 silly install resolved     _shasum: '923667123ba1b96657b9cbd1a8aeb5e8a86ea0da',
63 silly install resolved     _from: 'contextify@*',
63 silly install resolved     _npmVersion: '2.7.4',
63 silly install resolved     _nodeVersion: '0.12.2',
63 silly install resolved     _npmUser: { name: 'brianmcd', email: 'brianmcd05@gmail.com' },
63 silly install resolved     maintainers: [ [Object] ],
63 silly install resolved     dist:
63 silly install resolved      { shasum: '923667123ba1b96657b9cbd1a8aeb5e8a86ea0da',
63 silly install resolved        tarball: 'http://registry.npmjs.org/contextify/-/contextify-0.1.14.tgz' },
63 silly install resolved     directories: {},
63 silly install resolved     _resolved: 'https://registry.npmjs.org/contextify/-/contextify-0.1.14.tgz',
63 silly install resolved     readme: 'ERROR: No README data found!' } ]
64 info install contextify@0.1.14 into /home/aabakumovs/Documents/Projects/DashboardsProto
65 info installOne contextify@0.1.14
66 verbose installOne of contextify to /home/aabakumovs/Documents/Projects/DashboardsProto not in flight; installing
67 verbose lock using /home/aabakumovs/.npm/_locks/contextify-eb6f84e76c950696.lock for /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify
68 silly install write writing contextify 0.1.14 to /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify
69 verbose unbuild node_modules/contextify
70 silly gentlyRm /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify is being purged from base /home/aabakumovs/Documents/Projects/DashboardsProto
71 verbose gentlyRm don't care about contents; nuking /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify
72 verbose tar unpack /home/aabakumovs/.npm/contextify/0.1.14/package.tgz
73 verbose tar unpacking to /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify
74 silly gentlyRm /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify is being purged
75 verbose gentlyRm don't care about contents; nuking /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify
76 silly gunzTarPerm modes [ '775', '664' ]
77 silly gunzTarPerm extractEntry package.json
78 silly gunzTarPerm modified mode [ 'package.json', 420, 436 ]
79 silly gunzTarPerm extractEntry .npmignore
80 silly gunzTarPerm modified mode [ '.npmignore', 420, 436 ]
81 silly gunzTarPerm extractEntry README.md
82 silly gunzTarPerm modified mode [ 'README.md', 420, 436 ]
83 silly gunzTarPerm extractEntry changelog
84 silly gunzTarPerm modified mode [ 'changelog', 420, 436 ]
85 silly gunzTarPerm extractEntry binding.gyp
86 silly gunzTarPerm modified mode [ 'binding.gyp', 420, 436 ]
87 silly gunzTarPerm extractEntry lib/contextify.js
88 silly gunzTarPerm modified mode [ 'lib/contextify.js', 420, 436 ]
89 silly gunzTarPerm extractEntry test/contextify.js
90 silly gunzTarPerm modified mode [ 'test/contextify.js', 420, 436 ]
91 silly gunzTarPerm extractEntry LICENSE.txt
92 silly gunzTarPerm modified mode [ 'LICENSE.txt', 420, 436 ]
93 silly gunzTarPerm extractEntry src/contextify.cc
94 silly gunzTarPerm modified mode [ 'src/contextify.cc', 420, 436 ]
95 silly gunzTarPerm extractEntry wscript
96 silly gunzTarPerm modified mode [ 'wscript', 420, 436 ]
97 verbose write writing to /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/package.json
98 info preinstall contextify@0.1.14
99 verbose readDependencies loading dependencies from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/package.json
100 silly prepareForInstallMany adding bindings@* from contextify dependencies
101 silly prepareForInstallMany adding nan@~1.8.4 from contextify dependencies
102 verbose readDependencies loading dependencies from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/package.json
103 silly cache add args [ 'bindings@*', null ]
104 verbose cache add spec bindings@*
105 silly cache add args [ 'nan@~1.8.4', null ]
106 verbose cache add spec nan@~1.8.4
107 silly cache add parsed spec { raw: 'bindings@*',
107 silly cache add   scope: null,
107 silly cache add   name: 'bindings',
107 silly cache add   rawSpec: '*',
107 silly cache add   spec: '*',
107 silly cache add   type: 'range' }
108 silly addNamed bindings@*
109 verbose addNamed "*" is a valid semver range for bindings
110 silly addNameRange { name: 'bindings', range: '*', hasData: false }
111 silly mapToRegistry name bindings
112 silly mapToRegistry using default registry
113 silly mapToRegistry registry https://registry.npmjs.org/
114 silly mapToRegistry uri https://registry.npmjs.org/bindings
115 verbose addNameRange registry:https://registry.npmjs.org/bindings not in flight; fetching
116 silly cache add parsed spec { raw: 'nan@~1.8.4',
116 silly cache add   scope: null,
116 silly cache add   name: 'nan',
116 silly cache add   rawSpec: '~1.8.4',
116 silly cache add   spec: '>=1.8.4 <1.9.0',
116 silly cache add   type: 'range' }
117 silly addNamed nan@>=1.8.4 <1.9.0
118 verbose addNamed ">=1.8.4 <1.9.0" is a valid semver range for nan
119 silly addNameRange { name: 'nan', range: '>=1.8.4 <1.9.0', hasData: false }
120 silly mapToRegistry name nan
121 silly mapToRegistry using default registry
122 silly mapToRegistry registry https://registry.npmjs.org/
123 silly mapToRegistry uri https://registry.npmjs.org/nan
124 verbose addNameRange registry:https://registry.npmjs.org/nan not in flight; fetching
125 verbose request uri https://registry.npmjs.org/bindings
126 verbose request no auth needed
127 info attempt registry request try #1 at 08:17:55
128 verbose etag "D2XXGHY5EXANSKX6Q9FJABZ7W"
129 http request GET https://registry.npmjs.org/bindings
130 verbose request uri https://registry.npmjs.org/nan
131 verbose request no auth needed
132 info attempt registry request try #1 at 08:17:55
133 verbose etag "1L4RU1AM541YSVP1YQFXG1Y1J"
134 http request GET https://registry.npmjs.org/nan
135 http 304 https://registry.npmjs.org/bindings
136 silly get cb [ 304,
136 silly get   { date: 'Mon, 14 Sep 2015 15:17:55 GMT',
136 silly get     via: '1.1 varnish',
136 silly get     'cache-control': 'max-age=60',
136 silly get     etag: '"D2XXGHY5EXANSKX6Q9FJABZ7W"',
136 silly get     age: '12',
136 silly get     connection: 'keep-alive',
136 silly get     'x-served-by': 'cache-fra1220-FRA',
136 silly get     'x-cache': 'HIT',
136 silly get     'x-cache-hits': '1',
136 silly get     'x-timer': 'S1442243875.772478,VS0,VE0',
136 silly get     vary: 'Accept' } ]
137 verbose etag https://registry.npmjs.org/bindings from cache
138 verbose get saving bindings to /home/aabakumovs/.npm/registry.npmjs.org/bindings/.cache.json
139 http 304 https://registry.npmjs.org/nan
140 silly get cb [ 304,
140 silly get   { date: 'Mon, 14 Sep 2015 15:17:55 GMT',
140 silly get     via: '1.1 varnish',
140 silly get     'cache-control': 'max-age=60',
140 silly get     etag: '"1L4RU1AM541YSVP1YQFXG1Y1J"',
140 silly get     age: '39',
140 silly get     connection: 'keep-alive',
140 silly get     'x-served-by': 'cache-fra1225-FRA',
140 silly get     'x-cache': 'HIT',
140 silly get     'x-cache-hits': '3',
140 silly get     'x-timer': 'S1442243875.777640,VS0,VE0',
140 silly get     vary: 'Accept' } ]
141 verbose etag https://registry.npmjs.org/nan from cache
142 verbose get saving nan to /home/aabakumovs/.npm/registry.npmjs.org/nan/.cache.json
143 silly addNameRange number 2 { name: 'bindings', range: '*', hasData: true }
144 silly addNameRange versions [ 'bindings',
144 silly addNameRange   [ '0.0.1',
144 silly addNameRange     '0.1.0',
144 silly addNameRange     '0.1.1',
144 silly addNameRange     '0.2.0',
144 silly addNameRange     '0.2.1',
144 silly addNameRange     '0.2.2',
144 silly addNameRange     '0.2.3',
144 silly addNameRange     '0.2.4',
144 silly addNameRange     '0.3.0',
144 silly addNameRange     '0.4.0',
144 silly addNameRange     '1.0.0',
144 silly addNameRange     '1.1.0',
144 silly addNameRange     '1.1.1',
144 silly addNameRange     '1.2.0',
144 silly addNameRange     '1.2.1' ] ]
145 silly addNamed bindings@1.2.1
146 verbose addNamed "1.2.1" is a plain semver version for bindings
147 silly addNameRange number 2 { name: 'nan', range: '>=1.8.4 <1.9.0', hasData: true }
148 silly addNameRange versions [ 'nan',
148 silly addNameRange   [ '0.3.0-wip',
148 silly addNameRange     '0.3.0-wip2',
148 silly addNameRange     '0.3.0',
148 silly addNameRange     '0.3.1',
148 silly addNameRange     '0.3.2',
148 silly addNameRange     '0.4.0',
148 silly addNameRange     '0.4.1',
148 silly addNameRange     '0.4.2',
148 silly addNameRange     '0.4.3',
148 silly addNameRange     '0.4.4',
148 silly addNameRange     '0.5.0',
148 silly addNameRange     '0.5.1',
148 silly addNameRange     '0.5.2',
148 silly addNameRange     '0.6.0',
148 silly addNameRange     '0.7.0',
148 silly addNameRange     '0.7.1',
148 silly addNameRange     '0.8.0',
148 silly addNameRange     '1.0.0',
148 silly addNameRange     '1.1.0',
148 silly addNameRange     '1.1.1',
148 silly addNameRange     '1.1.2',
148 silly addNameRange     '1.2.0',
148 silly addNameRange     '1.3.0',
148 silly addNameRange     '1.4.0',
148 silly addNameRange     '1.4.1',
148 silly addNameRange     '1.5.0',
148 silly addNameRange     '1.4.2',
148 silly addNameRange     '1.4.3',
148 silly addNameRange     '1.5.1',
148 silly addNameRange     '1.5.2',
148 silly addNameRange     '1.6.0',
148 silly addNameRange     '1.5.3',
148 silly addNameRange     '1.6.1',
148 silly addNameRange     '1.6.2',
148 silly addNameRange     '1.7.0',
148 silly addNameRange     '1.8.0',
148 silly addNameRange     '1.8.1',
148 silly addNameRange     '1.8.2',
148 silly addNameRange     '1.8.3',
148 silly addNameRange     '1.8.4',
148 silly addNameRange     '1.9.0',
148 silly addNameRange     '2.0.0',
148 silly addNameRange     '2.0.1',
148 silly addNameRange     '2.0.2',
148 silly addNameRange     '2.0.3',
148 silly addNameRange     '2.0.4',
148 silly addNameRange     '2.0.5',
148 silly addNameRange     '2.0.6',
148 silly addNameRange     '2.0.7',
148 silly addNameRange     '2.0.8',
148 silly addNameRange     '2.0.9' ] ]
149 silly addNamed nan@1.8.4
150 verbose addNamed "1.8.4" is a plain semver version for nan
151 silly cache afterAdd bindings@1.2.1
152 verbose afterAdd /home/aabakumovs/.npm/bindings/1.2.1/package/package.json not in flight; writing
153 silly cache afterAdd nan@1.8.4
154 verbose afterAdd /home/aabakumovs/.npm/nan/1.8.4/package/package.json not in flight; writing
155 verbose afterAdd /home/aabakumovs/.npm/bindings/1.2.1/package/package.json written
156 verbose afterAdd /home/aabakumovs/.npm/nan/1.8.4/package/package.json written
157 silly install resolved [ { name: 'bindings',
157 silly install resolved     description: 'Helper module for loading your native module\'s .node file',
157 silly install resolved     keywords: [ 'native', 'addon', 'bindings', 'gyp', 'waf', 'c', 'c++' ],
157 silly install resolved     version: '1.2.1',
157 silly install resolved     author:
157 silly install resolved      { name: 'Nathan Rajlich',
157 silly install resolved        email: 'nathan@tootallnate.net',
157 silly install resolved        url: 'http://tootallnate.net' },
157 silly install resolved     repository:
157 silly install resolved      { type: 'git',
157 silly install resolved        url: 'git://github.com/TooTallNate/node-bindings.git' },
157 silly install resolved     main: './bindings.js',
157 silly install resolved     bugs: { url: 'https://github.com/TooTallNate/node-bindings/issues' },
157 silly install resolved     homepage: 'https://github.com/TooTallNate/node-bindings',
157 silly install resolved     license: 'MIT',
157 silly install resolved     readme: 'node-bindings\n=============\n### Helper module for loading your native module\'s .node file\n\nThis is a helper module for authors of Node.js native addon modules.\nIt is basically the "swiss army knife" of `require()`ing your native module\'s\n`.node` file.\n\nThroughout the course of Node\'s native addon history, addons have ended up being\ncompiled in a variety of different places, depending on which build tool and which\nversion of node was used. To make matters worse, now the _gyp_ build tool can\nproduce either a _Release_ or _Debug_ build, each being built into different\nlocations.\n\nThis module checks _all_ the possible locations that a native addon would be built\nat, and returns the first one that loads successfully.\n\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install bindings\n```\n\nOr add it to the `"dependencies"` section of your _package.json_ file.\n\n\nExample\n-------\n\n`require()`ing the proper bindings file for the current node version, platform\nand architecture is as simple as:\n\n``` js\nvar bindings = require(\'bindings\')(\'binding.node\')\n\n// Use your bindings defined in your C files\nbindings.your_c_function()\n```\n\n\nNice Error Output\n-----------------\n\nWhen the `.node` file could not be loaded, `node-bindings` throws an Error with\na nice error message telling you exactly what was tried. You can also check the\n`err.tries` Array property.\n\n```\nError: Could not load the bindings file. Tried:\n → /Users/nrajlich/ref/build/binding.node\n → /Users/nrajlich/ref/build/Debug/binding.node\n → /Users/nrajlich/ref/build/Release/binding.node\n → /Users/nrajlich/ref/out/Debug/binding.node\n → /Users/nrajlich/ref/Debug/binding.node\n → /Users/nrajlich/ref/out/Release/binding.node\n → /Users/nrajlich/ref/Release/binding.node\n → /Users/nrajlich/ref/build/default/binding.node\n → /Users/nrajlich/ref/compiled/0.8.2/darwin/x64/binding.node\n    at bindings (/Users/nrajlich/ref/node_modules/bindings/bindings.js:84:13)\n    at Object.<anonymous> (/Users/nrajlich/ref/lib/ref.js:5:47)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    ...\n```\n\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2012 Nathan Rajlich &lt;nathan@tootallnate.net&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
157 silly install resolved     readmeFilename: 'README.md',
157 silly install resolved     _id: 'bindings@1.2.1',
157 silly install resolved     _from: 'bindings@*' },
157 silly install resolved   { name: 'nan',
157 silly install resolved     version: '1.8.4',
157 silly install resolved     description: 'Native Abstractions for Node.js: C++ header for Node 0.8->0.12 compatibility',
157 silly install resolved     main: 'include_dirs.js',
157 silly install resolved     repository: { type: 'git', url: 'git://github.com/iojs/nan.git' },
157 silly install resolved     scripts:
157 silly install resolved      { test: 'tap --gc test/js/*-test.js',
157 silly install resolved        'rebuild-tests': 'pangyp rebuild --directory test' },
157 silly install resolved     contributors:
157 silly install resolved      [ [Object],
157 silly install resolved        [Object],
157 silly install resolved        [Object],
157 silly install resolved        [Object],
157 silly install resolved        [Object],
157 silly install resolved        [Object],
157 silly install resolved        [Object] ],
157 silly install resolved     devDependencies:
157 silly install resolved      { bindings: '~1.2.1',
157 silly install resolved        'node-gyp': '~1.0.2',
157 silly install resolved        pangyp: '~2.0.1',
157 silly install resolved        tap: '~0.7.1',
157 silly install resolved        xtend: '~4.0.0' },
157 silly install resolved     license: 'MIT',
157 silly install resolved     readme: 'Native Abstractions for Node.js\n===============================\n\n**A header file filled with macro and utility goodness for making add-on development for Node.js easier across versions 0.8, 0.10 and 0.12 as well as io.js.**\n\n***Current version: 1.8.4***\n\n*(See [CHANGELOG.md](https://github.com/iojs/nan/blob/master/CHANGELOG.md) for complete ChangeLog)*\n\n[![NPM](https://nodei.co/npm/nan.png?downloads=true&downloadRank=true)](https://nodei.co/npm/nan/) [![NPM](https://nodei.co/npm-dl/nan.png?months=6&height=3)](https://nodei.co/npm/nan/)\n\n[![Build Status](https://api.travis-ci.org/iojs/nan.svg?branch=master)](http://travis-ci.org/iojs/nan)\n[![Build status](https://ci.appveyor.com/api/projects/status/kh73pbm9dsju7fgh)](https://ci.appveyor.com/project/RodVagg/nan)\n\nThanks to the crazy changes in V8 (and some in Node core), keeping native addons compiling happily across versions, particularly 0.10 to 0.12, is a minor nightmare. The goal of this project is to store all logic necessary to develop native Node.js addons without having to inspect `NODE_MODULE_VERSION` and get yourself into a macro-tangle.\n\nThis project also contains some helper utilities that make addon development a bit more pleasant.\n\n * **[News & Updates](#news)**\n * **[Usage](#usage)**\n * **[Example](#example)**\n * **[API](#api)**\n * **[Tests](#tests)**\n * **[Porting](#porting)**\n * **[Governance & Contributing](#governance)**\n\n<a name="news"></a>\n## News & Updates\n\n### Apr-2015: 1.8.0 release\n\n* Support V8 4.2\n* Removed support for creating `Signature`s with arguments\n* Backported thread local storage routines for libuv\n\n### Feb-2015: 1.7.0 release\n\n* Made `NanCallback::Call` accept optional target\n* Support atom-shell 0.21\n\nNode 0.12.0 is out and supported by NAN. So is atom-shell 0.21. `NanCallback::Call` now accepts an optional `target` argument like `NanMakeCallback`.\n\n### Jan-2015: 1.6.0 release\n\n* Deprecated `NanNewContextHandle` in favor of `NanNew<Context>`\n* Added `NanSetCounterFunction`, `NanSetCreateHistogramFunction`, `NanSetAddHistogramSampleFunction`\n* Added `NanIdleNotification`, `NanLowMemoryNotification`, `NanContextDisposedNotification`\n* Added `NanEncode`, `NanDecodeBytes` and `NanDecodeWrite`\n\n### Jan-2015: 1.5.0 release\n\n* Support [io.js](https://github.com/iojs/io.js) thanks to [Ben Noordhuis](bnoordhuis)\n* Rewritten NanNew internals thanks to [David Siegel](agnat)\n* NanAsyncWorker now supports progress reporting thanks to [Brett Lawson](brett19)\n\n### Aug-2014: 1.3.0 release\n\n* `NanCString()` and `NanRawString()` have been deprecated in favour of new <a href="#api_nan_ascii_string"><b><code>NanAsciiString</code></b></a>, <a href="#api_nan_utf8_string"><b><code>NanUtf8String</code></b></a> and <a href="#api_nan_ucs2_string"><b><code>NanUcs2String</code></b></a>. These classes manage the underlying memory for you in a safer way than just handing off an allocated array. You should now `*NanAsciiString(handle)` to access the raw `char` data, you can also allocate on the heap if you need to keep a reference.\n* Two more <a href="#api_nan_make_callback"><b><code>NanMakeCallback</code></b></a> overloads have been added to for parity with Node core.\n* You can now `NanNew(std::string)` (use `NanNew<std::string&>(std::string&)` to pass by reference)\n* <a href="#api_nan_set_template"><b><code>NanSetTemplate</code></b></a>, <a href="#api_nan_set_prototype_template"><b><code>NanSetPrototypeTemplate</code></b></a> and <a href="#api_nan_set_instance_template"><b><code>NanSetInstanceTemplate</code></b></a> have been added.\n\n### May-2014: 1.1.0 release\n\n* We\'ve deprecated `NanSymbol()`, you should just use `NanNew<String>()` now.\n* `NanNull()`, `NanUndefined()`, `NanTrue()`, `NanFalse()` all return `Local`s now.\n* `nan_isolate` is gone, it was intended to be internal-only but if you were using it then you should switch to `v8::Isolate::GetCurrent()`.\n* `NanNew()` has received some additional overload-love so you should be able to give it many kinds of values without specifying the `<Type>`.\n* Lots of small fixes and additions to expand the V8 API coverage, *use the source, Luke*.\n\n\n### May-2014: Major changes for V8 3.25 / Node 0.11.13\n\nNode 0.11.11 and 0.11.12 were both broken releases for native add-ons, you simply can\'t properly compile against either of them for different reasons. But we now have a 0.11.13 release that jumps a couple of versions of V8 ahead and includes some more, major (traumatic) API changes.\n\nBecause we are now nearing Node 0.12 and estimate that the version of V8 we are using in Node 0.11.13 will be close to the API we get for 0.12, we have taken the opportunity to not only *fix* NAN for 0.11.13 but make some major changes to improve the NAN API.\n\nWe have **removed support for Node 0.11 versions prior to 0.11.13**. As usual, our tests are run against (and pass) the last 5 versions of Node 0.8 and Node 0.10. We also include Node 0.11.13 obviously.\n\nThe major change is something that [Benjamin Byholm](kkoopa) has put many hours in to. We now have a fantastic new `NanNew<T>(args)` interface for creating new `Local`s, this replaces `NanNewLocal()` and much more. If you look in [./nan.h](nan.h) you\'ll see a large number of overloaded versions of this method. In general you should be able to `NanNew<Type>(arguments)` for any type you want to make a `Local` from. This includes `Persistent` types, so we now have a `Local<T> NanNew(const Persistent<T> arg)` to replace `NanPersistentToLocal()`.\n\nWe also now have `NanUndefined()`, `NanNull()`, `NanTrue()` and `NanFalse()`. Mainly because of the new requirement for an `Isolate` argument for each of the native V8 versions of this.\n\nV8 has now introduced an `EscapableHandleScope` from which you `scope.Escape(Local<T> value)` to *return* a value from a one scope to another. This replaces the standard `HandleScope` and `scope.Close(Local<T> value)`, although `HandleScope` still exists for when you don\'t need to return a handle to the caller. For NAN we are exposing it as `NanEscapableScope()` and `NanEscapeScope()`, while `NanScope()` is still how you create a new scope that doesn\'t need to return handles. For older versions of Node/V8, it\'ll still map to the older `HandleScope` functionality.\n\n`NanFromV8String()` was deprecated and has now been removed. You should use `NanCString()` or `NanRawString()` instead.\n\nBecause `node::MakeCallback()` now takes an `Isolate`, and because it doesn\'t exist in older versions of Node, we\'ve introduced `NanMakeCallback()`. You should *always* use this when calling a JavaScript function from C++.\n\nThere\'s lots more, check out the Changelog in nan.h or look through [#86](https://github.com/iojs/nan/pull/86) for all the gory details.\n\n### Dec-2013: NanCString and NanRawString\n\nTwo new functions have been introduced to replace the functionality that\'s been provided by `NanFromV8String` until now. NanCString has sensible defaults so it\'s super easy to fetch a null-terminated c-style string out of a `v8::String`. `NanFromV8String` is still around and has defaults that allow you to pass a single handle to fetch a `char*` while `NanRawString` requires a little more attention to arguments.\n\n### Nov-2013: Node 0.11.9+ breaking V8 change\n\nThe version of V8 that\'s shipping with Node 0.11.9+ has changed the signature for new `Local`s to: `v8::Local<T>::New(isolate, value)`, i.e. introducing the `isolate` argument and therefore breaking all new `Local` declarations for previous versions. NAN 0.6+ now includes a `NanNewLocal<T>(value)` that can be used in place to work around this incompatibility and maintain compatibility with 0.8->0.11.9+ (minus a few early 0.11 releases).\n\nFor example, if you wanted to return a `null` on a callback you will have to change the argument from `v8::Local<v8::Value>::New(v8::Null())` to `NanNewLocal<v8::Value>(v8::Null())`.\n\n### Nov-2013: Change to binding.gyp `"include_dirs"` for NAN\n\nInclusion of NAN in a project\'s binding.gyp is now greatly simplified. You can now just use `"<!(node -e \\"require(\'nan\')\\")"` in your `"include_dirs"`, see example below (note Windows needs the quoting around `require` to be just right: `"require(\'nan\')"` with appropriate `\\` escaping).\n\n<a name="usage"></a>\n## Usage\n\nSimply add **NAN** as a dependency in the *package.json* of your Node addon:\n\n``` bash\n$ npm install --save nan\n```\n\nPull in the path to **NAN** in your *binding.gyp* so that you can use `#include <nan.h>` in your *.cpp* files:\n\n``` python\n"include_dirs" : [\n    "<!(node -e \\"require(\'nan\')\\")"\n]\n```\n\nThis works like a `-I<path-to-NAN>` when compiling your addon.\n\n<a name="example"></a>\n## Example\n\nSee **[LevelDOWN](https://github.com/rvagg/node-leveldown/pull/48)** for a full example of **NAN** in use.\n\nFor a simpler example, see the **[async pi estimation example](https://github.com/iojs/nan/tree/master/examples/async_pi_estimate)** in the examples directory for full code and an explanation of what this Monte Carlo Pi estimation example does. Below are just some parts of the full example that illustrate the use of **NAN**.\n\nFor another example, see **[nan-example-eol](https://github.com/CodeCharmLtd/nan-example-eol)**. It shows newline detection implemented as a native addon.\n\nCompare to the current 0.10 version of this example, found in the [node-addon-examples](https://github.com/iojs/node-addon-examples/tree/master/9_async_work) repository and also a 0.11 version of the same found [here](https://github.com/kkoopa/node-addon-examples/tree/5c01f58fc993377a567812597e54a83af69686d7/9_async_work).\n\nNote that there is no embedded version sniffing going on here and also the async work is made much simpler, see below for details on the `NanAsyncWorker` class.\n\n```c++\n// addon.cc\n#include <node.h>\n#include <nan.h>\n// ...\n\nusing v8::FunctionTemplate;\nusing v8::Handle;\nusing v8::Object;\nusing v8::String;\n\nvoid InitAll(Handle<Object> exports) {\n  exports->Set(NanNew<String>("calculateSync"),\n    NanNew<FunctionTemplate>(CalculateSync)->GetFunction());\n\n  exports->Set(NanNew<String>("calculateAsync"),\n    NanNew<FunctionTemplate>(CalculateAsync)->GetFunction());\n}\n\nNODE_MODULE(addon, InitAll)\n```\n\n```c++\n// sync.h\n#include <node.h>\n#include <nan.h>\n\nNAN_METHOD(CalculateSync);\n```\n\n```c++\n// sync.cc\n#include <node.h>\n#include <nan.h>\n#include "./sync.h"\n// ...\n\nusing v8::Number;\n\n// Simple synchronous access to the `Estimate()` function\nNAN_METHOD(CalculateSync) {\n  NanScope();\n\n  // expect a number as the first argument\n  int points = args[0]->Uint32Value();\n  double est = Estimate(points);\n\n  NanReturnValue(NanNew<Number>(est));\n}\n```\n\n```c++\n// async.h\n#include <node.h>\n#include <nan.h>\n\nNAN_METHOD(CalculateAsync);\n```\n\n```c++\n// async.cc\n#include <node.h>\n#include <nan.h>\n#include "./async.h"\n\n// ...\n\nusing v8::Function;\nusing v8::Local;\nusing v8::Null;\nusing v8::Number;\nusing v8::Value;\n\nclass PiWorker : public NanAsyncWorker {\n public:\n  PiWorker(NanCallback *callback, int points)\n    : NanAsyncWorker(callback), points(points) {}\n  ~PiWorker() {}\n\n  // Executed inside the worker-thread.\n  // It is not safe to access V8, or V8 data structures\n  // here, so everything we need for input and output\n  // should go on `this`.\n  void Execute () {\n    estimate = Estimate(points);\n  }\n\n  // Executed when the async work is complete\n  // this function will be run inside the main event loop\n  // so it is safe to use V8 again\n  void HandleOKCallback () {\n    NanScope();\n\n    Local<Value> argv[] = {\n        NanNull()\n      , NanNew<Number>(estimate)\n    };\n\n    callback->Call(2, argv);\n  };\n\n private:\n  int points;\n  double estimate;\n};\n\n// Asynchronous access to the `Estimate()` function\nNAN_METHOD(CalculateAsync) {\n  NanScope();\n\n  int points = args[0]->Uint32Value();\n  NanCallback *callback = new NanCallback(args[1].As<Function>());\n\n  NanAsyncQueueWorker(new PiWorker(callback, points));\n  NanReturnUndefined();\n}\n```\n\n<a name="api"></a>\n## API\n\n * <a href="#api_nan_method"><b><code>NAN_METHOD</code></b></a>\n * <a href="#api_nan_getter"><b><code>NAN_GETTER</code></b></a>\n * <a href="#api_nan_setter"><b><code>NAN_SETTER</code></b></a>\n * <a href="#api_nan_property_getter"><b><code>NAN_PROPERTY_GETTER</code></b></a>\n * <a href="#api_nan_property_setter"><b><code>NAN_PROPERTY_SETTER</code></b></a>\n * <a href="#api_nan_property_enumerator"><b><code>NAN_PROPERTY_ENUMERATOR</code></b></a>\n * <a href="#api_nan_property_deleter"><b><code>NAN_PROPERTY_DELETER</code></b></a>\n * <a href="#api_nan_property_query"><b><code>NAN_PROPERTY_QUERY</code></b></a>\n * <a href="#api_nan_index_getter"><b><code>NAN_INDEX_GETTER</code></b></a>\n * <a href="#api_nan_index_setter"><b><code>NAN_INDEX_SETTER</code></b></a>\n * <a href="#api_nan_index_enumerator"><b><code>NAN_INDEX_ENUMERATOR</code></b></a>\n * <a href="#api_nan_index_deleter"><b><code>NAN_INDEX_DELETER</code></b></a>\n * <a href="#api_nan_index_query"><b><code>NAN_INDEX_QUERY</code></b></a>\n * <a href="#api_nan_gc_callback"><b><code>NAN_GC_CALLBACK</code></b></a>\n * <a href="#api_nan_weak_callback"><b><code>NAN_WEAK_CALLBACK</code></b></a>\n * <a href="#api_nan_deprecated"><b><code>NAN_DEPRECATED</code></b></a>\n * <a href="#api_nan_inline"><b><code>NAN_INLINE</code></b></a>\n * <a href="#api_nan_new"><b><code>NanNew</code></b></a>\n * <a href="#api_nan_undefined"><b><code>NanUndefined</code></b></a>\n * <a href="#api_nan_null"><b><code>NanNull</code></b></a>\n * <a href="#api_nan_true"><b><code>NanTrue</code></b></a>\n * <a href="#api_nan_false"><b><code>NanFalse</code></b></a>\n * <a href="#api_nan_return_value"><b><code>NanReturnValue</code></b></a>\n * <a href="#api_nan_return_undefined"><b><code>NanReturnUndefined</code></b></a>\n * <a href="#api_nan_return_null"><b><code>NanReturnNull</code></b></a>\n * <a href="#api_nan_return_empty_string"><b><code>NanReturnEmptyString</code></b></a>\n * <a href="#api_nan_return_this"><b><code>NanReturnThis</code></b></a>\n * <a href="#api_nan_return_holder"><b><code>NanReturnHolder</code></b></a>\n * <a href="#api_nan_scope"><b><code>NanScope</code></b></a>\n * <a href="#api_nan_escapable_scope"><b><code>NanEscapableScope</code></b></a>\n * <a href="#api_nan_escape_scope"><b><code>NanEscapeScope</code></b></a>\n * <a href="#api_nan_locker"><b><code>NanLocker</code></b></a>\n * <a href="#api_nan_unlocker"><b><code>NanUnlocker</code></b></a>\n * <a href="#api_nan_get_internal_field_pointer"><b><code>NanGetInternalFieldPointer</code></b></a>\n * <a href="#api_nan_set_internal_field_pointer"><b><code>NanSetInternalFieldPointer</code></b></a>\n * <a href="#api_nan_object_wrap_handle"><b><code>NanObjectWrapHandle</code></b></a>\n * <del><a href="#api_nan_symbol"><b><code>NanSymbol</code></b></a></del>\n * <a href="#api_nan_get_pointer_safe"><b><code>NanGetPointerSafe</code></b></a>\n * <a href="#api_nan_set_pointer_safe"><b><code>NanSetPointerSafe</code></b></a>\n * <del><a href="#api_nan_raw_string"><b><code>NanRawString</code></b></a></del>\n * <del><a href="#api_nan_c_string"><b><code>NanCString</code></b></a></del>\n * <a href="#api_nan_ascii_string"><b><code>NanAsciiString</code></b></a>\n * <a href="#api_nan_utf8_string"><b><code>NanUtf8String</code></b></a>\n * <a href="#api_nan_ucs2_string"><b><code>NanUcs2String</code></b></a>\n * <a href="#api_nan_boolean_option_value"><b><code>NanBooleanOptionValue</code></b></a>\n * <a href="#api_nan_uint32_option_value"><b><code>NanUInt32OptionValue</code></b></a>\n * <a href="#api_nan_error"><b><code>NanError</code></b>, <b><code>NanTypeError</code></b>, <b><code>NanRangeError</code></b></a>\n * <a href="#api_nan_throw_error"><b><code>NanThrowError</code></b>, <b><code>NanThrowTypeError</code></b>, <b><code>NanThrowRangeError</code></b>, <b><code>NanThrowError(Handle<Value>)</code></b>, <b><code>NanThrowError(Handle<Value>, int)</code></b></a>\n * <a href="#api_nan_new_buffer_handle"><b><code>NanNewBufferHandle(char *, size_t, FreeCallback, void *)</code></b>, <b><code>NanNewBufferHandle(char *, uint32_t)</code></b>, <b><code>NanNewBufferHandle(uint32_t)</code></b></a>\n * <a href="#api_nan_buffer_use"><b><code>NanBufferUse(char *, uint32_t)</code></b></a>\n * <del><a href="#api_nan_new_context_handle"><b><code>NanNewContextHandle</code></b></a></del>\n * <a href="#api_nan_get_current_context"><b><code>NanGetCurrentContext</code></b></a>\n * <a href="#api_nan_has_instance"><b><code>NanHasInstance</code></b></a>\n * <a href="#api_nan_dispose_persistent"><b><code>NanDisposePersistent</code></b></a>\n * <a href="#api_nan_assign_persistent"><b><code>NanAssignPersistent</code></b></a>\n * <a href="#api_nan_make_weak_persistent"><b><code>NanMakeWeakPersistent</code></b></a>\n * <a href="#api_nan_set_template"><b><code>NanSetTemplate</code></b></a>\n * <a href="#api_nan_set_prototype_template"><b><code>NanSetPrototypeTemplate</code></b></a>\n * <a href="#api_nan_set_instance_template"><b><code>NanSetInstanceTemplate</code></b></a>\n * <a href="#api_nan_make_callback"><b><code>NanMakeCallback</code></b></a>\n * <a href="#api_nan_encode"><b><code>NanEncode</code></b></a>\n * <a href="#api_nan_decode_bytes"><b><code>NanDecodeBytes</code></b></a>\n * <a href="#api_nan_decode_write"><b><code>NanDecodeWrite</code></b></a>\n * <a href="#api_nan_compile_script"><b><code>NanCompileScript</code></b></a>\n * <a href="#api_nan_run_script"><b><code>NanRunScript</code></b></a>\n * <a href="#api_nan_adjust_external_memory"><b><code>NanAdjustExternalMemory</code></b></a>\n * <a href="#api_nan_add_gc_epilogue_callback"><b><code>NanAddGCEpilogueCallback</code></b></a>\n * <a href="#api_nan_add_gc_prologue_callback"><b><code>NanAddGCPrologueCallback</code></b></a>\n * <a href="#api_nan_remove_gc_epilogue_callback"><b><code>NanRemoveGCEpilogueCallback</code></b></a>\n * <a href="#api_nan_remove_gc_prologue_callback"><b><code>NanRemoveGCPrologueCallback</code></b></a>\n * <a href="#api_nan_get_heap_statistics"><b><code>NanGetHeapStatistics</code></b></a>\n * <a href="#api_nan_set_counter_function"><b><code>NanSetCounterFunction</code></b></a>\n * <a href="#api_nan_set_create_histogram_function"><b><code>NanSetCreateHistogramFunction</code></b></a>\n * <a href="#api_nan_set_add_histogram_sample_function"><b><code>NanSetAddHistogramSampleFunction</code></b></a>\n * <a href="#api_nan_idle_notification"><b><code>NanIdleNotification</code></b></a>\n * <a href="#api_nan_low_memory_notification"><b><code>NanLowMemoryNotification</code></b></a>\n * <a href="#api_nan_context_disposed_notification"><b><code>NanContextDisposedNotification</code></b></a>\n * <a href="#api_nan_callback"><b><code>NanCallback</code></b></a>\n * <a href="#api_nan_async_worker"><b><code>NanAsyncWorker</code></b></a>\n * <a href="#api_nan_async_queue_worker"><b><code>NanAsyncQueueWorker</code></b></a>\n\n<a name="api_nan_method"></a>\n### NAN_METHOD(methodname)\n\nUse `NAN_METHOD` to define your V8 accessible methods:\n\n```c++\n// .h:\nclass Foo : public node::ObjectWrap {\n  ...\n\n  static NAN_METHOD(Bar);\n  static NAN_METHOD(Baz);\n}\n\n\n// .cc:\nNAN_METHOD(Foo::Bar) {\n  ...\n}\n\nNAN_METHOD(Foo::Baz) {\n  ...\n}\n```\n\nThe reason for this macro is because of the method signature change in 0.11:\n\n```c++\n// 0.10 and below:\nHandle<Value> name(const Arguments& args)\n\n// 0.11 and above\nvoid name(const FunctionCallbackInfo<Value>& args)\n```\n\nThe introduction of `FunctionCallbackInfo` brings additional complications:\n\n<a name="api_nan_getter"></a>\n### NAN_GETTER(methodname)\n\nUse `NAN_GETTER` to declare your V8 accessible getters. You get a `Local<String>` `property` and an appropriately typed `args` object that can act like the `args` argument to a `NAN_METHOD` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_GETTER`.\n\n<a name="api_nan_setter"></a>\n### NAN_SETTER(methodname)\n\nUse `NAN_SETTER` to declare your V8 accessible setters. Same as `NAN_GETTER` but you also get a `Local<Value>` `value` object to work with.\n\n<a name="api_nan_property_getter"></a>\n### NAN_PROPERTY_GETTER(cbname)\nUse `NAN_PROPERTY_GETTER` to declare your V8 accessible property getters. You get a `Local<String>` `property` and an appropriately typed `args` object that can act similar to the `args` argument to a `NAN_METHOD` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_GETTER`.\n\n<a name="api_nan_property_setter"></a>\n### NAN_PROPERTY_SETTER(cbname)\nUse `NAN_PROPERTY_SETTER` to declare your V8 accessible property setters. Same as `NAN_PROPERTY_GETTER` but you also get a `Local<Value>` `value` object to work with.\n\n<a name="api_nan_property_enumerator"></a>\n### NAN_PROPERTY_ENUMERATOR(cbname)\nUse `NAN_PROPERTY_ENUMERATOR` to declare your V8 accessible property enumerators. You get an appropriately typed `args` object like the `args` argument to a `NAN_PROPERTY_GETTER` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_ENUMERATOR`.\n\n<a name="api_nan_property_deleter"></a>\n### NAN_PROPERTY_DELETER(cbname)\nUse `NAN_PROPERTY_DELETER` to declare your V8 accessible property deleters. Same as `NAN_PROPERTY_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_DELETER`.\n\n<a name="api_nan_property_query"></a>\n### NAN_PROPERTY_QUERY(cbname)\nUse `NAN_PROPERTY_QUERY` to declare your V8 accessible property queries. Same as `NAN_PROPERTY_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_QUERY`.\n\n<a name="api_nan_index_getter"></a>\n### NAN_INDEX_GETTER(cbname)\nUse `NAN_INDEX_GETTER` to declare your V8 accessible index getters. You get a `uint32_t` `index` and an appropriately typed `args` object that can act similar to the `args` argument to a `NAN_METHOD` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_GETTER`.\n\n<a name="api_nan_index_setter"></a>\n### NAN_INDEX_SETTER(cbname)\nUse `NAN_INDEX_SETTER` to declare your V8 accessible index setters. Same as `NAN_INDEX_GETTER` but you also get a `Local<Value>` `value` object to work with.\n\n<a name="api_nan_index_enumerator"></a>\n### NAN_INDEX_ENUMERATOR(cbname)\nUse `NAN_INDEX_ENUMERATOR` to declare your V8 accessible index enumerators. You get an appropriately typed `args` object like the `args` argument to a `NAN_INDEX_GETTER` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_ENUMERATOR`.\n\n<a name="api_nan_index_deleter"></a>\n### NAN_INDEX_DELETER(cbname)\nUse `NAN_INDEX_DELETER` to declare your V8 accessible index deleters. Same as `NAN_INDEX_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_DELETER`.\n\n<a name="api_nan_index_query"></a>\n### NAN_INDEX_QUERY(cbname)\nUse `NAN_INDEX_QUERY` to declare your V8 accessible index queries. Same as `NAN_INDEX_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_QUERY`.\n\n<a name="api_nan_gc_callback"></a>\n### NAN_GC_CALLBACK(cbname)\nUse `NAN_GC_CALLBACK` to declare your callbacks for `NanAddGCEpilogueCallback` and `NanAddGCPrologueCallback`. You get arguments `GCType type` and `GCCallbackFlags flags`.\n\n```c++\nstatic Persistent<Function> callback;\n\nNAN_GC_CALLBACK(gcPrologueCallback) {\n  Local<Value> argv[] = {NanNew("prologue")};\n  NanMakeCallback(NanGetCurrentContext()->Global(), NanNew(callback), 1, argv);\n}\n\nNAN_METHOD(Hook) {\n  NanScope();\n  NanAssignPersistent(callback, args[0].As<Function>());\n  NanAddGCPrologueCallback(gcPrologueCallback);\n  NanReturnValue(args.Holder());\n}\n```\n\n<a name="api_nan_weak_callback"></a>\n### NAN_WEAK_CALLBACK(cbname)\n\nUse `NAN_WEAK_CALLBACK` to define your V8 WeakReference callbacks. There is an argument object `const _NanWeakCallbackData<T, P> &data` allowing access to the weak object and the supplied parameter through its `GetValue` and `GetParameter` methods. You can even access the weak callback info object through the `GetCallbackInfo()`method, but you probably should not. `Revive()` keeps the weak object alive until the next GC round.\n\n```c++\nNAN_WEAK_CALLBACK(weakCallback) {\n  int *parameter = data.GetParameter();\n  NanMakeCallback(NanGetCurrentContext()->Global(), data.GetValue(), 0, NULL);\n  if ((*parameter)++ == 0) {\n    data.Revive();\n  } else {\n    delete parameter;\n  }\n}\n```\n\n<a name="api_nan_deprecated"></a>\n### NAN_DEPRECATED\nDeclares a function as deprecated.\n\n```c++\nstatic NAN_DEPRECATED NAN_METHOD(foo) {\n  ...\n}\n```\n\n<a name="api_nan_inline"></a>\n### NAN_INLINE\nInlines a function.\n\n```c++\nNAN_INLINE int foo(int bar) {\n  ...\n}\n```\n\n<a name="api_nan_new"></a>\n### Local&lt;T&gt; NanNew&lt;T&gt;( ... )\n\nUse `NanNew` to construct almost all v8 objects (bound `Script`s are constructed with <a href="#api_nan_compile_script">`NanCompileScript(Handle)`</a>) and make new local handles.\n\n```c++\nLocal<String> s = NanNew<String>("value");\n\n...\n\nPersistent<Object> o;\n\n...\n\nLocal<Object> lo = NanNew(o);\n\n```\n\n<a name="api_nan_undefined"></a>\n### Local&lt;Primitive&gt; NanUndefined()\n\nUse instead of `Undefined()`\n\n<a name="api_nan_null"></a>\n### Local&lt;Primitive&gt; NanNull()\n\nUse instead of `Null()`\n\n<a name="api_nan_true"></a>\n### Local&lt;Boolean&gt; NanTrue()\n\nUse instead of `True()`\n\n<a name="api_nan_false"></a>\n### Local&lt;Boolean&gt; NanFalse()\n\nUse instead of `False()`\n\n<a name="api_nan_return_value"></a>\n### NanReturnValue(Handle&lt;Value&gt;)\n\nUse `NanReturnValue` when you want to return a value from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  ...\n\n  NanReturnValue(NanNew<String>("FooBar!"));\n}\n```\n\nNo `return` statement required.\n\nFor convenience, `NanReturnValue` also accepts common primitives directly by implicitly performing an overloaded `NanNew(T)`.\n\n```c++\nNanReturnValue("FooBar!");\nNanReturnValue(true);\nNanReturnValue(12);\nNanReturnValue(3.14);\n```\n\n<a name="api_nan_return_undefined"></a>\n### NanReturnUndefined()\n\nUse `NanReturnUndefined` when you don\'t want to return anything from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnUndefined();\n}\n```\n\n<a name="api_nan_return_null"></a>\n### NanReturnNull()\n\nUse `NanReturnNull` when you want to return `Null` from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnNull();\n}\n```\n\n<a name="api_nan_return_empty_string"></a>\n### NanReturnEmptyString()\n\nUse `NanReturnEmptyString` when you want to return an empty `String` from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnEmptyString();\n}\n```\n\n<a name="api_nan_return_this"></a>\n### NanReturnThis()\n\nUse `NanReturnThis` when you want to return `This` from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnThis();\n}\n```\n\n<a name="api_nan_return_holder"></a>\n### NanReturnHolder()\n\nUse `NanReturnHolder` when you want to return `Holder` from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnHolder();\n}\n```\n\n<a name="api_nan_scope"></a>\n### NanScope()\n\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanScope()` necessary, use it in place of `HandleScope scope` when you do not wish to return handles (`Handle` or `Local`) to the surrounding scope (or in functions directly exposed to V8, as they do not return values in the normal sense):\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  NanScope();\n\n  NanReturnValue(NanNew<String>("FooBar!"));\n}\n```\n\nThis method is not directly exposed to V8, nor does it return a handle, so it uses an unescapable scope:\n\n```c++\nbool Foo::Bar() {\n  NanScope();\n\n  Local<Boolean> val = NanFalse();\n  ...\n  return val->Value();\n}\n```\n\n<a name="api_nan_escapable_scope"></a>\n### NanEscapableScope()\n\nThe separation of handle scopes into escapable and inescapable scopes makes `NanEscapableScope()` necessary, use it in place of `HandleScope scope` when you later wish to return a handle (`Handle` or `Local`) from the scope, this is for internal functions not directly exposed to V8:\n\n```c++\nHandle<String> Foo::Bar() {\n  NanEscapableScope();\n\n  return NanEscapeScope(NanNew<String>("FooBar!"));\n}\n```\n\n<a name="api_nan_escape_scope"></a>\n### Local&lt;T&gt; NanEscapeScope(Handle&lt;T&gt; value);\nUse together with `NanEscapableScope` to escape the scope. Corresponds to `HandleScope::Close` or `EscapableHandleScope::Escape`.\n\n<a name="api_nan_locker"></a>\n### NanLocker()\n\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanLocker()` necessary, use it in place of `Locker locker`:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  NanLocker();\n  ...\n  NanUnlocker();\n}\n```\n\n<a name="api_nan_unlocker"></a>\n### NanUnlocker()\n\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanUnlocker()` necessary, use it in place of `Unlocker unlocker`:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  NanLocker();\n  ...\n  NanUnlocker();\n}\n```\n\n<a name="api_nan_get_internal_field_pointer"></a>\n### void * NanGetInternalFieldPointer(Handle&lt;Object&gt;, int)\n\nGets a pointer to the internal field with at `index` from a V8 `Object` handle.\n\n```c++\nLocal<Object> obj;\n...\nNanGetInternalFieldPointer(obj, 0);\n```\n<a name="api_nan_set_internal_field_pointer"></a>\n### void NanSetInternalFieldPointer(Handle&lt;Object&gt;, int, void *)\n\nSets the value of the internal field at `index` on a V8 `Object` handle.\n\n```c++\nstatic Persistent<Function> dataWrapperCtor;\n...\nLocal<Object> wrapper = NanNew(dataWrapperCtor)->NewInstance();\nNanSetInternalFieldPointer(wrapper, 0, this);\n```\n\n<a name="api_nan_object_wrap_handle"></a>\n### Local&lt;Object&gt; NanObjectWrapHandle(const node::ObjectWrap &amp;obj)\n\nWhen you want to fetch the V8 object handle from a native object you\'ve wrapped with Node\'s `ObjectWrap`, you should use `NanObjectWrapHandle`:\n\n```c++\nNanObjectWrapHandle(iterator)->Get(NanNew<String>("end"))\n```\n\n<a name="api_nan_symbol"></a>\n### ~~Local&lt;String&gt; NanSymbol(const char *)~~\n\nDeprecated. Use `NanNew<String>` instead.\n~~Use to create string symbol objects (i.e. `v8::String::NewSymbol(x)`), for getting and setting object properties, or names of objects.~~\n\n```c++\nbool foo = false;\nif (obj->Has(NanNew<String>("foo")))\n  foo = optionsObj->Get(NanNew<String>("foo"))->BooleanValue()\n```\n\n<a name="api_nan_get_pointer_safe"></a>\n### Type NanGetPointerSafe(Type *[, Type])\n\nA helper for getting values from optional pointers. If the pointer is `NULL`, the function returns the optional default value, which defaults to `0`.  Otherwise, the function returns the value the pointer points to.\n\n```c++\nchar *plugh(uint32_t *optional) {\n  char res[] = "xyzzy";\n  uint32_t param = NanGetPointerSafe<uint32_t>(optional, 0x1337);\n  switch (param) {\n    ...\n  }\n  NanSetPointerSafe<uint32_t>(optional, 0xDEADBEEF);\n}  \n```\n\n<a name="api_nan_set_pointer_safe"></a>\n### bool NanSetPointerSafe(Type *, Type)\n\nA helper for setting optional argument pointers. If the pointer is `NULL`, the function simply returns `false`.  Otherwise, the value is assigned to the variable the pointer points to.\n\n```c++\nconst char *plugh(size_t *outputsize) {\n  char res[] = "xyzzy";\n  if !(NanSetPointerSafe<size_t>(outputsize, strlen(res) + 1)) {\n    ...\n  }\n\n  ...\n}\n```\n\n<a name="api_nan_raw_string"></a>\n### ~~void* NanRawString(Handle&lt;Value&gt;, enum Nan::Encoding, size_t *, void *, size_t, int)~~\n\nDeprecated. Use something else.\n\n~~When you want to convert a V8 `String` to a `char*` buffer, use `NanRawString`. You have to supply an encoding as well as a pointer to a variable that will be assigned the number of bytes in the returned string. It is also possible to supply a buffer and its length to the function in order not to have a new buffer allocated. The final argument allows setting `String::WriteOptions`.\nJust remember that you\'ll end up with an object that you\'ll need to `delete[]` at some point unless you supply your own buffer:~~\n\n```c++\nsize_t count;\nvoid* decoded = NanRawString(args[1], Nan::BASE64, &count, NULL, 0, String::HINT_MANY_WRITES_EXPECTED);\n...\ndelete[] reinterpret_cast<char*>(decoded);\n```\n\n<a name="api_nan_c_string"></a>\n### ~~char* NanCString(Handle&lt;Value&gt;, size_t *[, char *, size_t, int])~~\n\nDeprecated. Use `String::Utf8Value` or `NanUtf8String` instead.\n\n~~When you want to convert a V8 `String` to a null-terminated C `char*` use `NanCString`. The resulting `char*` will be UTF-8-encoded, and you need to supply a pointer to a variable that will be assigned the number of bytes in the returned string. It is also possible to supply a buffer and its length to the function in order not to have a new buffer allocated. The final argument allows optionally setting `String::WriteOptions`, which default to `v8::String::NO_OPTIONS`.\nJust remember that you\'ll end up with an object that you\'ll need to `delete[]` at some point unless you supply your own buffer:~~\n\n```c++\nsize_t count;\nchar* name = NanCString(args[0], &count);\n...\ndelete[] name;\n```\n\n<a name="api_nan_ascii_string"></a>\n### NanAsciiString\n\nContrary to the name, this is not actually an ASCII string, it is a one-byte string with no particular encoding. Do not use unless you actually need this incorrect legacy behavior. Consider fixing your broken code instead. If you actually have a proper ASCII-string, use UTF-8, which is a proper superset of ASCII.\nConvert a `String` to zero-terminated, sort-of Ascii-encoded `char *`. The underlying buffer is freed when the owner object goes out of scope, so make a copy or heap allocation if you need it to stick around.\n\n```c++\nNAN_METHOD(foo) {\n  NanScope();\n  NanReturnValue(NanNew(*NanAsciiString(arg[0])));\n}\n```\n\n####*WRONG*:\nthe buffer `str` points to has been freed when `baz` was destroyed:\n```c++\nstatic char *str;\n\nNAN_METHOD(bar) {\n  NanScope();\n  NanAsciiString baz(arg[0]);\n\n  str = *baz;\n  NanReturnUndefined(); // baz goes out of scope, freeing str\n}\n\n...\n\nprintf(str); // use-after-free error\n```\n\n####*RIGHT*:\n```c++\nstatic NanAsciiString *str;\n\nNAN_METHOD(bar) {\n  NanScope();\n  str = new NanAsciiString(arg[0]);\n  NanReturnUndefined();\n}\n\n...\n\nprintf(**str);\n```\n\n<a name="api_nan_utf8_string"></a>\n### NanUtf8String\n\nEquivalent to `String::Utf8Value`, it only exists for the sake of completeness.\nConvert a `String` to zero-terminated, Utf8-encoded `char *`. The underlying buffer is freed when the owner object goes out of scope, so make a copy or heap allocation if you need it to stick around.\n\n```c++\nNAN_METHOD(foo) {\n  NanScope();\n  NanReturnValue(NanNew(*NanUtf8String(arg[0])));\n}\n```\n\n####*WRONG*:\nthe buffer `str` points to has been freed when `baz` was destroyed:\n```c++\nstatic char *str;\n\nNAN_METHOD(bar) {\n  NanScope();\n  NanUtf8String baz(arg[0]);\n\n  str = *baz;\n  NanReturnUndefined(); // baz goes out of scope, freeing str\n}\n\n...\n\nprintf(str); // use-after-free error\n```\n\n####*RIGHT*:\n```c++\nstatic NanUtf8String *str;\n\nNAN_METHOD(bar) {\n  NanScope();\n  str = new NanUtf8String(arg[0]);\n  NanReturnUndefined();\n}\n\n...\n\nprintf(**str);\n```\n\n\n<a name="api_nan_ucs2_string"></a>\n### NanUcs2String\n\nEquivalent to `String::Value`, it only exists for the sake of completeness.\nConvert a `String` to zero-terminated, Ucs2-encoded `uint16_t *`. The underlying buffer is freed when the owner object goes out of scope, so make a copy or heap allocation if you need it to stick around.\n\n```c++\nNAN_METHOD(foo) {\n  NanScope();\n  NanReturnValue(NanNew(*NanUcs2String(arg[0])));\n}\n```\n\n####*WRONG*:\nthe buffer `str` points to has been freed when `baz` was destroyed:\n```c++\nstatic char *str;\n\nNAN_METHOD(bar) {\n  NanScope();\n  NanUcs2String baz(arg[0]);\n\n  str = *baz;\n  NanReturnUndefined(); // baz goes out of scope, freeing str\n}\n\n...\n\nprintf(str); // use-after-free error\n```\n\n####*RIGHT*:\n```c++\nstatic NanUcs2String *str;\n\nNAN_METHOD(bar) {\n  NanScope();\n  str = new NanUcs2String(arg[0]);\n  NanReturnUndefined();\n}\n\n...\n\nprintf(**str);\n```\n\n<a name="api_nan_boolean_option_value"></a>\n### bool NanBooleanOptionValue(Handle&lt;Value&gt;, Handle&lt;String&gt;[, bool])\n\nWhen you have an "options" object that you need to fetch properties from, boolean options can be fetched with this pair. They check first if the object exists (`IsEmpty`), then if the object has the given property (`Has`) then they get and convert/coerce the property to a `bool`.\n\nThe optional last parameter is the *default* value, which is `false` if left off:\n\n```c++\n// `foo` is false unless the user supplies a truthy value for it\nbool foo = NanBooleanOptionValue(optionsObj, NanNew<String>("foo"));\n// `bar` is true unless the user supplies a falsy value for it\nbool bar = NanBooleanOptionValueDefTrue(optionsObj, NanNew<String>("bar"), true);\n```\n\n<a name="api_nan_uint32_option_value"></a>\n### uint32_t NanUInt32OptionValue(Handle&lt;Value&gt;, Handle&lt;String&gt;, uint32_t)\n\nSimilar to `NanBooleanOptionValue`, use `NanUInt32OptionValue` to fetch an integer option from your options object. Can be any kind of JavaScript `Number` and it will be coerced to an unsigned 32-bit integer.\n\nRequires all 3 arguments as a default is not optional:\n\n```c++\nuint32_t count = NanUInt32OptionValue(optionsObj, NanNew<String>("count"), 1024);\n```\n\n<a name="api_nan_error"></a>\n### NanError(message), NanTypeError(message), NanRangeError(message)\n\nFor making `Error`, `TypeError` and `RangeError` objects.\n\n```c++\nLocal<Value> res = NanError("you must supply a callback argument");\n```\n\n<a name="api_nan_throw_error"></a>\n### NanThrowError(message), NanThrowTypeError(message), NanThrowRangeError(message), NanThrowError(Local&lt;Value&gt;), NanThrowError(Local&lt;Value&gt;, int)\n\nFor throwing `Error`, `TypeError` and `RangeError` objects.\n\n```c++\nNanThrowError("you must supply a callback argument");\n```\n\nCan also handle any custom object you may want to throw. If used with the error code argument, it will add the supplied error code to the error object as a property called `code`.\n\n<a name="api_nan_new_buffer_handle"></a>\n### Local&lt;Object&gt; NanNewBufferHandle(char *, uint32_t), Local&lt;Object&gt; NanNewBufferHandle(uint32_t)\n\nThe `Buffer` API has changed a little in Node 0.11, this helper provides consistent access to `Buffer` creation:\n\n```c++\nNanNewBufferHandle((char*)value.data(), value.size());\n```\n\nCan also be used to initialize a `Buffer` with just a `size` argument.\n\nCan also be supplied with a `NanFreeCallback` and a hint for the garbage collector.\n\n<a name="api_nan_buffer_use"></a>\n### Local&lt;Object&gt; NanBufferUse(char*, uint32_t)\n\n`Buffer::New(char*, uint32_t)` prior to 0.11 would make a copy of the data.\nWhile it was possible to get around this, it required a shim by passing a\ncallback. So the new API `Buffer::Use(char*, uint32_t)` was introduced to remove\nneeding to use this shim.\n\n`NanBufferUse` uses the `char*` passed as the backing data, and will free the\nmemory automatically when the weak callback is called. Keep this in mind, as\ncareless use can lead to "double free or corruption" and other cryptic failures.\n\n<a name="api_nan_has_instance"></a>\n### bool NanHasInstance(Persistent&lt;FunctionTemplate&gt;&, Handle&lt;Value&gt;)\n\nCan be used to check the type of an object to determine it is of a particular class you have already defined and have a `Persistent<FunctionTemplate>` handle for.\n\n<a name="api_nan_new_context_handle"></a>\n### ~~Local&lt;Context&gt; NanNewContextHandle([ExtensionConfiguration*, Handle&lt;ObjectTemplate&gt;, Handle&lt;Value&gt;])~~\n\nDeprecated. Use `NanNew<Context>` instead.\n\n~~Creates a new `Local<Context>` handle.~~\n\n```c++\nLocal<FunctionTemplate> ftmpl = NanNew<FunctionTemplate>();\nLocal<ObjectTemplate> otmpl = ftmpl->InstanceTemplate();\nLocal<Context> ctx =  NanNewContextHandle(NULL, otmpl);\n```\n\n<a name="api_nan_get_current_context"></a>\n### Local&lt;Context&gt; NanGetCurrentContext()\n\nGets the current context.\n\n```c++\nLocal<Context> ctx = NanGetCurrentContext();\n```\n\n<a name="api_nan_dispose_persistent"></a>\n### void NanDisposePersistent(Persistent&lt;T&gt; &)\n\nUse `NanDisposePersistent` to dispose a `Persistent` handle.\n\n```c++\nNanDisposePersistent(persistentHandle);\n```\n\n<a name="api_nan_assign_persistent"></a>\n### NanAssignPersistent(handle, object)\n\nUse `NanAssignPersistent` to assign a non-`Persistent` handle to a `Persistent` one. You can no longer just declare a `Persistent` handle and assign directly to it later, you have to `Reset` it in Node 0.11, so this makes it easier.\n\nIn general it is now better to place anything you want to protect from V8\'s garbage collector as properties of a generic `Object` and then assign that to a `Persistent`. This works in older versions of Node also if you use `NanAssignPersistent`:\n\n```c++\nPersistent<Object> persistentHandle;\n\n...\n\nLocal<Object> obj = NanNew<Object>();\nobj->Set(NanNew<String>("key"), keyHandle); // where keyHandle might be a Local<String>\nNanAssignPersistent(persistentHandle, obj)\n```\n\n<a name="api_nan_make_weak_persistent"></a>\n### _NanWeakCallbackInfo&lt;T, P&gt;* NanMakeWeakPersistent(Handle&lt;T&gt;, P*, _NanWeakCallbackInfo&lt;T, P&gt;::Callback)\n\nCreates a weak persistent handle with the supplied parameter and `NAN_WEAK_CALLBACK`.\n\n```c++\nNAN_WEAK_CALLBACK(weakCallback) {\n\n...\n\n}\n\nLocal<Function> func;\n\n...\n\nint *parameter = new int(0);\nNanMakeWeakPersistent(func, parameter, &weakCallback);\n```\n\n<a name="api_nan_set_template"></a>\n### NanSetTemplate(templ, name, value [, attributes])\n\nUse to add properties on object and function templates.\n\n<a name="api_nan_set_prototype_template"></a>\n### NanSetPrototypeTemplate(templ, name, value [, attributes])\n\nUse to add prototype properties on function templates.\n\n<a name="api_nan_set_instance_template"></a>\n### NanSetInstanceTemplate(templ, name, value [, attributes])\n\nUse to add instance properties on function templates.\n\n<a name="api_nan_make_callback"></a>\n### NanMakeCallback(target, func, argc, argv)\n\nUse instead of `node::MakeCallback` to call javascript functions. This (or `NanCallback`) is the only proper way of calling functions. You must _*never, ever*_ directly use `Function::Call`, it will lead to run-time failures.\n\n<a name="api_nan_encode"></a>\n### NanEncode(const void*, size_t[, enum Nan::Encoding])\n\nReplaces `node::Encode`.\n\n<a name="api_nan_decode_bytes"></a>\n### NanDecodeBytes(v8::Handle&lt;v8::Value&gt;[, enum Nan::Encoding])\n\nReplaces `node::DecodeBytes`.\n\n<a name="api_nan_decode_write"></a>\n### NanDecodeWrite(char *, size_t, v8::Handle&lt;v8::Value&gt;[, enum Nan::Encoding])\n\nReplaces `node::DecodeWrite`.\n\n<a name="api_nan_compile_script"></a>\n### NanCompileScript(Handle<String> s [, const ScriptOrigin&amp; origin])\n\nUse to create new scripts bound to the current context.\n\n<a name="api_nan_run_script"></a>\n### NanRunScript(script)\n\nUse to run both bound and unbound scripts.\n\n<a name="api_nan_adjust_external_memory"></a>\n### NanAdjustExternalMemory(int change_in_bytes)\n\nSimply does `AdjustAmountOfExternalAllocatedMemory`, note that the argument and returned value have type `int`.\n\n<a name="api_nan_add_gc_epilogue_callback"></a>\n### NanAddGCEpilogueCallback(GCEpilogueCallback callback, GCType gc_type_filter=kGCTypeAll)\n\nSimply does `AddGCEpilogueCallback`\n\n<a name="api_nan_add_gc_prologue_callback"></a>\n### NanAddGCPrologueCallback(GCPrologueCallback callback, GCType gc_type_filter=kGCTypeAll)\n\nSimply does `AddGCPrologueCallback`\n\n<a name="api_nan_remove_gc_epilogue_callback"></a>\n### NanRemoveGCEpilogueCallback(GCEpilogueCallback callback)\n\nSimply does `RemoveGCEpilogueCallback`\n\n<a name="api_nan_remove_gc_prologue_callback"></a>\n### NanRemoveGCPrologueCallback(GCPrologueCallback callback)\n\nSimply does `RemoveGCPrologueCallback`\n\n<a name="api_nan_get_heap_statistics"></a>\n### NanGetHeapStatistics(HeapStatistics *heap_statistics)\n\nSimply does `GetHeapStatistics`\n\n<a name="api_nan_set_counter_function"></a>\n### NanSetCounterFunction(CounterLookupCallback cb)\n\nSimply does `SetCounterFunction`\n\n<a name="api_nan_set_create_histogram_function"></a>\n### NanSetCreateHistogramFunction(CreateHistogramCallback cb)\n\nSimply does `SetCreateHistogramFunction`\n\n<a name="api_nan_set_add_histogram_sample_function"></a>\n### NanSetAddHistogramSampleFunction(AddHistogramSampleCallback cb)\n\nSimply does `SetAddHistogramSampleFunction`\n\n<a name="api_nan_idle_notification"></a>\n### NanIdleNotification(int idle_time_in_ms)\n\nSimply does `IdleNotification`\n\n<a name="api_nan_low_memory_notification"></a>\n### NanLowMemoryNotification()\n\nSimply does `LowMemoryNotification`\n\n<a name="api_nan_context_disposed_notification"></a>\n### NanContextDisposedNotification()\n\nSimply does `ContextDisposedNotification`\n\n<a name="api_nan_callback"></a>\n### NanCallback\n\nBecause of the difficulties imposed by the changes to `Persistent` handles in V8 in Node 0.11, creating `Persistent` versions of your `Handle<Function>` is annoyingly tricky. `NanCallback` makes it easier by taking your handle, making it persistent until the `NanCallback` is deleted and even providing a handy `Call()` method to fetch and execute the callback `Function`.\n\n```c++\nLocal<Function> callbackHandle = args[0].As<Function>();\nNanCallback *callback = new NanCallback(callbackHandle);\n// pass `callback` around and it\'s safe from GC until you:\ndelete callback;\n```\n\nYou can execute the callback like so:\n\n```c++\n// no arguments:\ncallback->Call(0, NULL);\n\n// an error argument:\nHandle<Value> argv[] = {\n  NanError(NanNew<String>("fail!"))\n};\ncallback->Call(1, argv);\n\n// a success argument:\nHandle<Value> argv[] = {\n  NanNull(),\n  NanNew<String>("w00t!")\n};\ncallback->Call(2, argv);\n```\n\n`NanCallback` also has a `Local<Function> GetFunction()` method that you can use\nto fetch a local handle to the underlying callback function, as well  as a\n`void SetFunction(Handle<Function>)` for setting the callback on the\n`NanCallback`. You can check if a `NanCallback` is empty with the `bool IsEmpty()` method. Additionally a generic constructor is available for using\n`NanCallback` without performing heap allocations.\n\n<a name="api_nan_async_worker"></a>\n### NanAsyncWorker\n\n`NanAsyncWorker` is an abstract class that you can subclass to have much of the annoying async queuing and handling taken care of for you. It can even store arbitrary V8 objects for you and have them persist while the async work is in progress.\n\nSee a rough outline of the implementation:\n\n```c++\nclass NanAsyncWorker {\npublic:\n  NanAsyncWorker (NanCallback *callback);\n\n  // Clean up persistent handles and delete the *callback\n  virtual ~NanAsyncWorker ();\n\n  // Check the `ErrorMessage()` and call HandleOKCallback()\n  // or HandleErrorCallback depending on whether it has been set or not\n  virtual void WorkComplete ();\n\n  // You must implement this to do some async work. If there is an\n  // error then use `SetErrorMessage()` to set an error message and the callback will\n  // be passed that string in an Error object\n  virtual void Execute ();\n\n  // Save a V8 object in a Persistent handle to protect it from GC\n  void SaveToPersistent(const char *key, Local<Object> &obj);\n\n  // Fetch a stored V8 object (don\'t call from within `Execute()`)\n  Local<Object> GetFromPersistent(const char *key);\n\n  // Get the error message (or NULL)\n  const char *ErrorMessage();\n\n  // Set an error message\n  void SetErrorMessage(const char *msg);\n\nprotected:\n  // Default implementation calls the callback function with no arguments.\n  // Override this to return meaningful data\n  virtual void HandleOKCallback ();\n\n  // Default implementation calls the callback function with an Error object\n  // wrapping the `errmsg` string\n  virtual void HandleErrorCallback ();\n};\n```\n\n<a name="api_nan_async_queue_worker"></a>\n### NanAsyncQueueWorker(NanAsyncWorker *)\n\n`NanAsyncQueueWorker` will run a `NanAsyncWorker` asynchronously via libuv. Both the *execute* and *after_work* steps are taken care of for you&mdash;most of the logic for this is embedded in `NanAsyncWorker`.\n\n<a name="api"></a>\n### Tests\n\nTo run the NAN tests do:\n\n``` sh\nnpm install\nnpm run-script rebuild-tests\nnpm test\n```\n\nOr just:\n\n``` sh\nnpm install\nmake test\n```\n\n## Porting\n\nFollows is a guide to porting your C++ node to NAN.\n\n<table><tbody>\n\n<tr><th>Aspect</th><th>Without NAN</th><th>With NAN</th></tr>\n\n<tr><td>Function declaration</td><td><pre>class MyClass : public ObjectWrap {\n    ....\n    static Handle<Value> ToString(const Arguments& args);\n    ....\n}</pre></td></th><td><pre>class MyClass : public ObjectWrap {\n    ....\n    static NAN_METHOD(ToString);\n    ....\n}</pre></td></tr>\n\n<tr><td>Function definition</td><td><pre>Handle<Value>\nMyClass::ToString(const Arguments& args)\n{\n\tHandleScope scope;\n\t....\n}</pre></td></th><td><pre>\nNAN_METHOD(MyClass::ToString)\n{\n  NanScope();\n  ....\n}</pre></td></tr>\n\n<tr><td>Return a value</td><td><pre>return scope.Close(result);</pre></td></th><td><pre>NanReturnValue(result);</pre></td></tr>\n\n<tr><td>Return undefined</td><td><pre>return Undefined();</pre></td></th><td><pre>NanReturnUndefined();</pre></td></tr>\n\n<tr><td>Throw an error</td><td><pre>return ThrowException(\n  Exception::Error(\n    String::New("Error text...")));</pre></td></th><td><pre>return NanThrowError("Error text...");</pre></td></tr>\n\n<tr><td>New v8 string literal</td><td><pre>String::NewSymbol("my text")</pre></td></th><td><pre>NanNew("my text")</pre></td></tr>\n\n</tbody></table>\n\n## Contributors\n\n<a name="governance"></a>\n\n## Governance & Contributing\n\nNAN is governed by the [io.js](https://iojs.org/) Addon API Working Group\n\n### Addon API Working Group (WG)\n\nThe NAN project is jointly governed by a Working Group which is responsible for high-level guidance of the project.\n\nMembers of the WG are also known as Collaborators, there is no distinction between the two, unlike other io.js projects.\n\nThe WG has final authority over this project including:\n\n* Technical direction\n* Project governance and process (including this policy)\n* Contribution policy\n* GitHub repository hosting\n* Maintaining the list of additional Collaborators\n\nFor the current list of WG members, see the project [README.md](./README.md#collaborators).\n\nIndividuals making significant and valuable contributions are made members of the WG and given commit-access to the project. These individuals are identified by the WG and their addition to the WG is discussed via GitHub and requires unanimous consensus amongst those WG members participating in the discussion with a quorum of 50% of WG members required for acceptance of the vote.\n\n_Note:_ If you make a significant contribution and are not considered for commit-access log an issue or contact a WG member directly.\n\nFor the current list of WG members / Collaborators, see the project [README.md](./README.md#collaborators).\n\n### Consensus Seeking Process\n\nThe WG follows a [Consensus Seeking](http://en.wikipedia.org/wiki/Consensus-seeking_decision-making) decision making model.\n\nModifications of the contents of the NAN repository are made on a collaborative basis. Anybody with a GitHub account may propose a modification via pull request and it will be considered by the WG. All pull requests must be reviewed and accepted by a WG member with sufficient expertise who is able to take full responsibility for the change. In the case of pull requests proposed by an existing WG member, an additional WG member is required for sign-off. Consensus should be sought if additional WG members participate and there is disagreement around a particular modification.\n\nIf a change proposal cannot reach a consensus, a WG member can call for a vote amongst the members of the WG. Simple majority wins.\n\n### Developer\'s Certificate of Origin 1.0\n\nBy making a contribution to this project, I certify that:\n\n* (a) The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file; or\n* (b) The contribution is based upon previous work that, to the best of my knowledge, is covered under an appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the same open source license (unless I am permitted to submit under a different license), as indicated in the file; or\n* (c) The contribution was provided directly to me by some other person who certified (a), (b) or (c) and I have not modified it.\n\n<a name="collaborators"></a>\n### WG Members / Collaborators\n\n<table><tbody>\n<tr><th align="left">Rod Vagg</th><td><a href="https://github.com/rvagg">GitHub/rvagg</a></td><td><a href="http://twitter.com/rvagg">Twitter/@rvagg</a></td></tr>\n<tr><th align="left">Benjamin Byholm</th><td><a href="https://github.com/kkoopa/">GitHub/kkoopa</a></td><td>-</td></tr>\n<tr><th align="left">Trevor Norris</th><td><a href="https://github.com/trevnorris">GitHub/trevnorris</a></td><td><a href="http://twitter.com/trevnorris">Twitter/@trevnorris</a></td></tr>\n<tr><th align="left">Nathan Rajlich</th><td><a href="https://github.com/TooTallNate">GitHub/TooTallNate</a></td><td><a href="http://twitter.com/TooTallNate">Twitter/@TooTallNate</a></td></tr>\n<tr><th align="left">Brett Lawson</th><td><a href="https://github.com/brett19">GitHub/brett19</a></td><td><a href="http://twitter.com/brett19x">Twitter/@brett19x</a></td></tr>\n<tr><th align="left">Ben Noordhuis</th><td><a href="https://github.com/bnoordhuis">GitHub/bnoordhuis</a></td><td><a href="http://twitter.com/bnoordhuis">Twitter/@bnoordhuis</a></td></tr>\n<tr><th align="left">David Siegel</th><td><a href="https://github.com/agnat">GitHub/agnat</a></td><td>-</td></tr>\n</tbody></table>\n\n## Licence &amp; copyright\n\nCopyright (c) 2015 NAN WG Members / Collaborators (listed above).\n\nNative Abstractions for Node.js is licensed under an MIT license. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details.\n',
157 silly install resolved     readmeFilename: 'README.md',
157 silly install resolved     bugs: { url: 'https://github.com/iojs/nan/issues' },
157 silly install resolved     homepage: 'https://github.com/iojs/nan#readme',
157 silly install resolved     _id: 'nan@1.8.4',
157 silly install resolved     _from: 'nan@>=1.8.4 <1.9.0' } ]
158 info install bindings@1.2.1 into /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify
159 info install nan@1.8.4 into /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify
160 info installOne bindings@1.2.1
161 verbose installOne of bindings to /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify not in flight; installing
162 info installOne nan@1.8.4
163 verbose installOne of nan to /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify not in flight; installing
164 verbose lock using /home/aabakumovs/.npm/_locks/bindings-46531b34303a4cae.lock for /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/bindings
165 verbose lock using /home/aabakumovs/.npm/_locks/nan-06d39e198ad8b73b.lock for /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/nan
166 silly install write writing bindings 1.2.1 to /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/bindings
167 silly install write writing nan 1.8.4 to /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/nan
168 verbose unbuild node_modules/contextify/node_modules/bindings
169 verbose unbuild node_modules/contextify/node_modules/nan
170 silly gentlyRm /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/bindings is being purged from base /home/aabakumovs/Documents/Projects/DashboardsProto
171 verbose gentlyRm don't care about contents; nuking /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/bindings
172 silly gentlyRm /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/nan is being purged from base /home/aabakumovs/Documents/Projects/DashboardsProto
173 verbose gentlyRm don't care about contents; nuking /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/nan
174 verbose tar unpack /home/aabakumovs/.npm/bindings/1.2.1/package.tgz
175 verbose tar unpacking to /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/bindings
176 silly gentlyRm /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/bindings is being purged
177 verbose gentlyRm don't care about contents; nuking /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/bindings
178 verbose tar unpack /home/aabakumovs/.npm/nan/1.8.4/package.tgz
179 verbose tar unpacking to /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/nan
180 silly gentlyRm /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/nan is being purged
181 verbose gentlyRm don't care about contents; nuking /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/nan
182 silly gunzTarPerm modes [ '775', '664' ]
183 silly gunzTarPerm modes [ '775', '664' ]
184 silly gunzTarPerm extractEntry package.json
185 silly gunzTarPerm modified mode [ 'package.json', 438, 436 ]
186 silly gunzTarPerm extractEntry package.json
187 silly gunzTarPerm modified mode [ 'package.json', 438, 436 ]
188 silly gunzTarPerm extractEntry README.md
189 silly gunzTarPerm modified mode [ 'README.md', 438, 436 ]
190 silly gunzTarPerm extractEntry bindings.js
191 silly gunzTarPerm modified mode [ 'bindings.js', 438, 436 ]
192 silly gunzTarPerm extractEntry README.md
193 silly gunzTarPerm modified mode [ 'README.md', 438, 436 ]
194 silly gunzTarPerm extractEntry include_dirs.js
195 silly gunzTarPerm modified mode [ 'include_dirs.js', 438, 436 ]
196 silly gunzTarPerm extractEntry .dntrc
197 silly gunzTarPerm modified mode [ '.dntrc', 438, 436 ]
198 silly gunzTarPerm extractEntry appveyor.yml
199 silly gunzTarPerm modified mode [ 'appveyor.yml', 438, 436 ]
200 silly gunzTarPerm extractEntry LICENSE.md
201 silly gunzTarPerm modified mode [ 'LICENSE.md', 438, 436 ]
202 silly gunzTarPerm extractEntry CHANGELOG.md
203 silly gunzTarPerm modified mode [ 'CHANGELOG.md', 438, 436 ]
204 verbose write writing to /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/bindings/package.json
205 info preinstall bindings@1.2.1
206 verbose readDependencies loading dependencies from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/bindings/package.json
207 verbose readDependencies loading dependencies from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/bindings/package.json
208 silly install resolved []
209 verbose about to build /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/bindings
210 info build /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/bindings
211 info linkStuff bindings@1.2.1
212 silly linkStuff bindings@1.2.1 has /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules as its parent node_modules
213 silly gunzTarPerm extractEntry nan_implementation_12_inl.h
214 silly gunzTarPerm modified mode [ 'nan_implementation_12_inl.h', 438, 436 ]
215 verbose linkBins bindings@1.2.1
216 verbose linkMans bindings@1.2.1
217 verbose rebuildBundles bindings@1.2.1
218 info install bindings@1.2.1
219 info postinstall bindings@1.2.1
220 verbose unlock done using /home/aabakumovs/.npm/_locks/bindings-46531b34303a4cae.lock for /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/bindings
221 silly gunzTarPerm extractEntry nan_implementation_pre_12_inl.h
222 silly gunzTarPerm modified mode [ 'nan_implementation_pre_12_inl.h', 438, 436 ]
223 silly gunzTarPerm extractEntry nan_new.h
224 silly gunzTarPerm modified mode [ 'nan_new.h', 438, 436 ]
225 silly gunzTarPerm extractEntry nan_string_bytes.h
226 silly gunzTarPerm modified mode [ 'nan_string_bytes.h', 438, 436 ]
227 silly gunzTarPerm extractEntry nan.h
228 silly gunzTarPerm modified mode [ 'nan.h', 438, 436 ]
229 verbose write writing to /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/nan/package.json
230 info preinstall nan@1.8.4
231 verbose readDependencies loading dependencies from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/nan/package.json
232 verbose readDependencies loading dependencies from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/nan/package.json
233 silly install resolved []
234 verbose about to build /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/nan
235 info build /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/nan
236 info linkStuff nan@1.8.4
237 silly linkStuff nan@1.8.4 has /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules as its parent node_modules
238 verbose linkBins nan@1.8.4
239 verbose linkMans nan@1.8.4
240 verbose rebuildBundles nan@1.8.4
241 info install nan@1.8.4
242 info postinstall nan@1.8.4
243 verbose unlock done using /home/aabakumovs/.npm/_locks/nan-06d39e198ad8b73b.lock for /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify/node_modules/nan
244 verbose about to build /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify
245 info build /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify
246 info linkStuff contextify@0.1.14
247 silly linkStuff contextify@0.1.14 has /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules as its parent node_modules
248 verbose linkBins contextify@0.1.14
249 verbose linkMans contextify@0.1.14
250 verbose rebuildBundles contextify@0.1.14
251 verbose rebuildBundles [ 'bindings', 'nan' ]
252 info install contextify@0.1.14
253 verbose unsafe-perm in lifecycle true
254 info contextify@0.1.14 Failed to exec install script
255 verbose unlock done using /home/aabakumovs/.npm/_locks/contextify-eb6f84e76c950696.lock for /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify
256 verbose stack Error: contextify@0.1.14 install: `node-gyp rebuild`
256 verbose stack Exit status 1
256 verbose stack     at EventEmitter.<anonymous> (/usr/lib/node_modules/npm/lib/utils/lifecycle.js:214:16)
256 verbose stack     at emitTwo (events.js:87:13)
256 verbose stack     at EventEmitter.emit (events.js:172:7)
256 verbose stack     at ChildProcess.<anonymous> (/usr/lib/node_modules/npm/lib/utils/spawn.js:24:14)
256 verbose stack     at emitTwo (events.js:87:13)
256 verbose stack     at ChildProcess.emit (events.js:172:7)
256 verbose stack     at maybeClose (internal/child_process.js:764:16)
256 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:211:5)
257 verbose pkgid contextify@0.1.14
258 verbose cwd /home/aabakumovs/Documents/Projects/DashboardsProto
259 error Linux 3.19.0-28-generic
260 error argv "/usr/bin/nodejs" "/usr/bin/npm" "install" "contextify"
261 error node v3.0.0
262 error npm  v2.14.2
263 error code ELIFECYCLE
264 error contextify@0.1.14 install: `node-gyp rebuild`
264 error Exit status 1
265 error Failed at the contextify@0.1.14 install script 'node-gyp rebuild'.
265 error This is most likely a problem with the contextify package,
265 error not with npm itself.
265 error Tell the author that this fails on your system:
265 error     node-gyp rebuild
265 error You can get their info via:
265 error     npm owner ls contextify
265 error There is likely additional logging output above.
266 verbose exit [ 1, true ]
267 verbose unbuild node_modules/contextify
268 info preuninstall contextify@0.1.14
269 info uninstall contextify@0.1.14
270 verbose unbuild rmStuff contextify@0.1.14 from /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules
271 info postuninstall contextify@0.1.14
272 silly gentlyRm /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify is being purged from base /home/aabakumovs/Documents/Projects/DashboardsProto
273 verbose gentlyRm don't care about contents; nuking /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify
274 silly vacuum-fs purging /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules/contextify
275 silly vacuum-fs quitting because other entries in /home/aabakumovs/Documents/Projects/DashboardsProto/node_modules
